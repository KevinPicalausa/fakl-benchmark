#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Fakl_benchmark.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Fakl_benchmarking")]
	public partial class FaklDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertyearreport(yearreport instance);
    partial void Updateyearreport(yearreport instance);
    partial void Deleteyearreport(yearreport instance);
    partial void Insertbase_divisor(base_divisor instance);
    partial void Updatebase_divisor(base_divisor instance);
    partial void Deletebase_divisor(base_divisor instance);
    partial void Insertbuilding_has_basedivisor(building_has_basedivisor instance);
    partial void Updatebuilding_has_basedivisor(building_has_basedivisor instance);
    partial void Deletebuilding_has_basedivisor(building_has_basedivisor instance);
    partial void Insertbuilding(building instance);
    partial void Updatebuilding(building instance);
    partial void Deletebuilding(building instance);
    partial void Insertcategory(category instance);
    partial void Updatecategory(category instance);
    partial void Deletecategory(category instance);
    partial void Insertcategories_has_basedivisor(categories_has_basedivisor instance);
    partial void Updatecategories_has_basedivisor(categories_has_basedivisor instance);
    partial void Deletecategories_has_basedivisor(categories_has_basedivisor instance);
    partial void Insertcost(cost instance);
    partial void Updatecost(cost instance);
    partial void Deletecost(cost instance);
    partial void Insertmainrubric(mainrubric instance);
    partial void Updatemainrubric(mainrubric instance);
    partial void Deletemainrubric(mainrubric instance);
    partial void Insertmunicipality(municipality instance);
    partial void Updatemunicipality(municipality instance);
    partial void Deletemunicipality(municipality instance);
    partial void Insertmunicipality_has_user(municipality_has_user instance);
    partial void Updatemunicipality_has_user(municipality_has_user instance);
    partial void Deletemunicipality_has_user(municipality_has_user instance);
    partial void Insertquestion(question instance);
    partial void Updatequestion(question instance);
    partial void Deletequestion(question instance);
    partial void Insertstatuscode(statuscode instance);
    partial void Updatestatuscode(statuscode instance);
    partial void Deletestatuscode(statuscode instance);
    partial void Insertsubrubric(subrubric instance);
    partial void Updatesubrubric(subrubric instance);
    partial void Deletesubrubric(subrubric instance);
    partial void Insertusergroup(usergroup instance);
    partial void Updateusergroup(usergroup instance);
    partial void Deleteusergroup(usergroup instance);
    partial void Insertuser(user instance);
    partial void Updateuser(user instance);
    partial void Deleteuser(user instance);
    partial void Insertyearreport_cost(yearreport_cost instance);
    partial void Updateyearreport_cost(yearreport_cost instance);
    partial void Deleteyearreport_cost(yearreport_cost instance);
    #endregion
		
		public FaklDataClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["Fakl_benchmarkingConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public FaklDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FaklDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FaklDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FaklDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<answer> answers
		{
			get
			{
				return this.GetTable<answer>();
			}
		}
		
		public System.Data.Linq.Table<yearreport> yearreports
		{
			get
			{
				return this.GetTable<yearreport>();
			}
		}
		
		public System.Data.Linq.Table<base_divisor> base_divisors
		{
			get
			{
				return this.GetTable<base_divisor>();
			}
		}
		
		public System.Data.Linq.Table<building_has_basedivisor> building_has_basedivisors
		{
			get
			{
				return this.GetTable<building_has_basedivisor>();
			}
		}
		
		public System.Data.Linq.Table<building> buildings
		{
			get
			{
				return this.GetTable<building>();
			}
		}
		
		public System.Data.Linq.Table<category> categories
		{
			get
			{
				return this.GetTable<category>();
			}
		}
		
		public System.Data.Linq.Table<categories_has_basedivisor> categories_has_basedivisors
		{
			get
			{
				return this.GetTable<categories_has_basedivisor>();
			}
		}
		
		public System.Data.Linq.Table<cost> costs
		{
			get
			{
				return this.GetTable<cost>();
			}
		}
		
		public System.Data.Linq.Table<mainrubric> mainrubrics
		{
			get
			{
				return this.GetTable<mainrubric>();
			}
		}
		
		public System.Data.Linq.Table<municipality> municipalities
		{
			get
			{
				return this.GetTable<municipality>();
			}
		}
		
		public System.Data.Linq.Table<municipality_has_user> municipality_has_users
		{
			get
			{
				return this.GetTable<municipality_has_user>();
			}
		}
		
		public System.Data.Linq.Table<newsletter> newsletters
		{
			get
			{
				return this.GetTable<newsletter>();
			}
		}
		
		public System.Data.Linq.Table<question> questions
		{
			get
			{
				return this.GetTable<question>();
			}
		}
		
		public System.Data.Linq.Table<statuscode> statuscodes
		{
			get
			{
				return this.GetTable<statuscode>();
			}
		}
		
		public System.Data.Linq.Table<subrubric> subrubrics
		{
			get
			{
				return this.GetTable<subrubric>();
			}
		}
		
		public System.Data.Linq.Table<user_acceptance> user_acceptances
		{
			get
			{
				return this.GetTable<user_acceptance>();
			}
		}
		
		public System.Data.Linq.Table<usergroup> usergroups
		{
			get
			{
				return this.GetTable<usergroup>();
			}
		}
		
		public System.Data.Linq.Table<user> users
		{
			get
			{
				return this.GetTable<user>();
			}
		}
		
		public System.Data.Linq.Table<yearreport_cost> yearreport_costs
		{
			get
			{
				return this.GetTable<yearreport_cost>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.answers")]
	public partial class answer
	{
		
		private int _id;
		
		private long _value;
		
		private int _question_id;
		
		private int _yearreport_id;
		
		public answer()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL")]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="BigInt NOT NULL")]
		public long value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this._value = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_question_id", DbType="Int NOT NULL")]
		public int question_id
		{
			get
			{
				return this._question_id;
			}
			set
			{
				if ((this._question_id != value))
				{
					this._question_id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_yearreport_id", DbType="Int NOT NULL")]
		public int yearreport_id
		{
			get
			{
				return this._yearreport_id;
			}
			set
			{
				if ((this._yearreport_id != value))
				{
					this._yearreport_id = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.yearreports")]
	public partial class yearreport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Year;
		
		private int _municipality_id;
		
		private int _building_id;
		
		private int _statuscode_id;
		
		private EntitySet<yearreport_cost> _yearreport_costs;
		
		private EntityRef<municipality> _municipality;
		
		private EntityRef<statuscode> _statuscode;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnYearChanging(string value);
    partial void OnYearChanged();
    partial void Onmunicipality_idChanging(int value);
    partial void Onmunicipality_idChanged();
    partial void Onbuilding_idChanging(int value);
    partial void Onbuilding_idChanged();
    partial void Onstatuscode_idChanging(int value);
    partial void Onstatuscode_idChanged();
    #endregion
		
		public yearreport()
		{
			this._yearreport_costs = new EntitySet<yearreport_cost>(new Action<yearreport_cost>(this.attach_yearreport_costs), new Action<yearreport_cost>(this.detach_yearreport_costs));
			this._municipality = default(EntityRef<municipality>);
			this._statuscode = default(EntityRef<statuscode>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="NChar(4) NOT NULL", CanBeNull=false)]
		public string Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_municipality_id", DbType="Int NOT NULL")]
		public int municipality_id
		{
			get
			{
				return this._municipality_id;
			}
			set
			{
				if ((this._municipality_id != value))
				{
					if (this._municipality.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onmunicipality_idChanging(value);
					this.SendPropertyChanging();
					this._municipality_id = value;
					this.SendPropertyChanged("municipality_id");
					this.Onmunicipality_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_building_id", DbType="Int NOT NULL")]
		public int building_id
		{
			get
			{
				return this._building_id;
			}
			set
			{
				if ((this._building_id != value))
				{
					this.Onbuilding_idChanging(value);
					this.SendPropertyChanging();
					this._building_id = value;
					this.SendPropertyChanged("building_id");
					this.Onbuilding_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_statuscode_id", DbType="Int NOT NULL")]
		public int statuscode_id
		{
			get
			{
				return this._statuscode_id;
			}
			set
			{
				if ((this._statuscode_id != value))
				{
					if (this._statuscode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onstatuscode_idChanging(value);
					this.SendPropertyChanging();
					this._statuscode_id = value;
					this.SendPropertyChanged("statuscode_id");
					this.Onstatuscode_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="yearreport_yearreport_cost", Storage="_yearreport_costs", ThisKey="id", OtherKey="yearreport_id")]
		public EntitySet<yearreport_cost> yearreport_costs
		{
			get
			{
				return this._yearreport_costs;
			}
			set
			{
				this._yearreport_costs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="municipality_yearreport", Storage="_municipality", ThisKey="municipality_id", OtherKey="id", IsForeignKey=true)]
		public municipality municipality
		{
			get
			{
				return this._municipality.Entity;
			}
			set
			{
				municipality previousValue = this._municipality.Entity;
				if (((previousValue != value) 
							|| (this._municipality.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._municipality.Entity = null;
						previousValue.yearreports.Remove(this);
					}
					this._municipality.Entity = value;
					if ((value != null))
					{
						value.yearreports.Add(this);
						this._municipality_id = value.id;
					}
					else
					{
						this._municipality_id = default(int);
					}
					this.SendPropertyChanged("municipality");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="statuscode_yearreport", Storage="_statuscode", ThisKey="statuscode_id", OtherKey="id", IsForeignKey=true)]
		public statuscode statuscode
		{
			get
			{
				return this._statuscode.Entity;
			}
			set
			{
				statuscode previousValue = this._statuscode.Entity;
				if (((previousValue != value) 
							|| (this._statuscode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._statuscode.Entity = null;
						previousValue.yearreports.Remove(this);
					}
					this._statuscode.Entity = value;
					if ((value != null))
					{
						value.yearreports.Add(this);
						this._statuscode_id = value.id;
					}
					else
					{
						this._statuscode_id = default(int);
					}
					this.SendPropertyChanged("statuscode");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_yearreport_costs(yearreport_cost entity)
		{
			this.SendPropertyChanging();
			entity.yearreport = this;
		}
		
		private void detach_yearreport_costs(yearreport_cost entity)
		{
			this.SendPropertyChanging();
			entity.yearreport = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.base_divisors")]
	public partial class base_divisor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _tooltip;
		
		private byte _disabled;
		
		private EntitySet<building_has_basedivisor> _building_has_basedivisors;
		
		private EntitySet<categories_has_basedivisor> _categories_has_basedivisors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OntooltipChanging(string value);
    partial void OntooltipChanged();
    partial void OndisabledChanging(byte value);
    partial void OndisabledChanged();
    #endregion
		
		public base_divisor()
		{
			this._building_has_basedivisors = new EntitySet<building_has_basedivisor>(new Action<building_has_basedivisor>(this.attach_building_has_basedivisors), new Action<building_has_basedivisor>(this.detach_building_has_basedivisors));
			this._categories_has_basedivisors = new EntitySet<categories_has_basedivisor>(new Action<categories_has_basedivisor>(this.attach_categories_has_basedivisors), new Action<categories_has_basedivisor>(this.detach_categories_has_basedivisors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NChar(25) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tooltip", DbType="NChar(150)")]
		public string tooltip
		{
			get
			{
				return this._tooltip;
			}
			set
			{
				if ((this._tooltip != value))
				{
					this.OntooltipChanging(value);
					this.SendPropertyChanging();
					this._tooltip = value;
					this.SendPropertyChanged("tooltip");
					this.OntooltipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_disabled", DbType="TinyInt NOT NULL")]
		public byte disabled
		{
			get
			{
				return this._disabled;
			}
			set
			{
				if ((this._disabled != value))
				{
					this.OndisabledChanging(value);
					this.SendPropertyChanging();
					this._disabled = value;
					this.SendPropertyChanged("disabled");
					this.OndisabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="base_divisor_building_has_basedivisor", Storage="_building_has_basedivisors", ThisKey="id", OtherKey="base_divisor_id")]
		public EntitySet<building_has_basedivisor> building_has_basedivisors
		{
			get
			{
				return this._building_has_basedivisors;
			}
			set
			{
				this._building_has_basedivisors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="base_divisor_categories_has_basedivisor", Storage="_categories_has_basedivisors", ThisKey="id", OtherKey="base_divisor_id")]
		public EntitySet<categories_has_basedivisor> categories_has_basedivisors
		{
			get
			{
				return this._categories_has_basedivisors;
			}
			set
			{
				this._categories_has_basedivisors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_building_has_basedivisors(building_has_basedivisor entity)
		{
			this.SendPropertyChanging();
			entity.base_divisor = this;
		}
		
		private void detach_building_has_basedivisors(building_has_basedivisor entity)
		{
			this.SendPropertyChanging();
			entity.base_divisor = null;
		}
		
		private void attach_categories_has_basedivisors(categories_has_basedivisor entity)
		{
			this.SendPropertyChanging();
			entity.base_divisor = this;
		}
		
		private void detach_categories_has_basedivisors(categories_has_basedivisor entity)
		{
			this.SendPropertyChanging();
			entity.base_divisor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.building_has_basedivisor")]
	public partial class building_has_basedivisor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _base_divisor_id;
		
		private int _building_id;
		
		private long _value;
		
		private EntityRef<base_divisor> _base_divisor;
		
		private EntityRef<building> _building;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onbase_divisor_idChanging(int value);
    partial void Onbase_divisor_idChanged();
    partial void Onbuilding_idChanging(int value);
    partial void Onbuilding_idChanged();
    partial void OnvalueChanging(long value);
    partial void OnvalueChanged();
    #endregion
		
		public building_has_basedivisor()
		{
			this._base_divisor = default(EntityRef<base_divisor>);
			this._building = default(EntityRef<building>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_base_divisor_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int base_divisor_id
		{
			get
			{
				return this._base_divisor_id;
			}
			set
			{
				if ((this._base_divisor_id != value))
				{
					if (this._base_divisor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onbase_divisor_idChanging(value);
					this.SendPropertyChanging();
					this._base_divisor_id = value;
					this.SendPropertyChanged("base_divisor_id");
					this.Onbase_divisor_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_building_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int building_id
		{
			get
			{
				return this._building_id;
			}
			set
			{
				if ((this._building_id != value))
				{
					if (this._building.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onbuilding_idChanging(value);
					this.SendPropertyChanging();
					this._building_id = value;
					this.SendPropertyChanged("building_id");
					this.Onbuilding_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="BigInt NOT NULL")]
		public long value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="base_divisor_building_has_basedivisor", Storage="_base_divisor", ThisKey="base_divisor_id", OtherKey="id", IsForeignKey=true)]
		public base_divisor base_divisor
		{
			get
			{
				return this._base_divisor.Entity;
			}
			set
			{
				base_divisor previousValue = this._base_divisor.Entity;
				if (((previousValue != value) 
							|| (this._base_divisor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._base_divisor.Entity = null;
						previousValue.building_has_basedivisors.Remove(this);
					}
					this._base_divisor.Entity = value;
					if ((value != null))
					{
						value.building_has_basedivisors.Add(this);
						this._base_divisor_id = value.id;
					}
					else
					{
						this._base_divisor_id = default(int);
					}
					this.SendPropertyChanged("base_divisor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="building_building_has_basedivisor", Storage="_building", ThisKey="building_id", OtherKey="id", IsForeignKey=true)]
		public building building
		{
			get
			{
				return this._building.Entity;
			}
			set
			{
				building previousValue = this._building.Entity;
				if (((previousValue != value) 
							|| (this._building.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._building.Entity = null;
						previousValue.building_has_basedivisors.Remove(this);
					}
					this._building.Entity = value;
					if ((value != null))
					{
						value.building_has_basedivisors.Add(this);
						this._building_id = value.id;
					}
					else
					{
						this._building_id = default(int);
					}
					this.SendPropertyChanged("building");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.buildings")]
	public partial class building : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private int _category_id;
		
		private EntitySet<building_has_basedivisor> _building_has_basedivisors;
		
		private EntityRef<category> _category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Oncategory_idChanging(int value);
    partial void Oncategory_idChanged();
    #endregion
		
		public building()
		{
			this._building_has_basedivisors = new EntitySet<building_has_basedivisor>(new Action<building_has_basedivisor>(this.attach_building_has_basedivisors), new Action<building_has_basedivisor>(this.detach_building_has_basedivisors));
			this._category = default(EntityRef<category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_category_id", DbType="Int NOT NULL")]
		public int category_id
		{
			get
			{
				return this._category_id;
			}
			set
			{
				if ((this._category_id != value))
				{
					if (this._category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncategory_idChanging(value);
					this.SendPropertyChanging();
					this._category_id = value;
					this.SendPropertyChanged("category_id");
					this.Oncategory_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="building_building_has_basedivisor", Storage="_building_has_basedivisors", ThisKey="id", OtherKey="building_id")]
		public EntitySet<building_has_basedivisor> building_has_basedivisors
		{
			get
			{
				return this._building_has_basedivisors;
			}
			set
			{
				this._building_has_basedivisors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="category_building", Storage="_category", ThisKey="category_id", OtherKey="id", IsForeignKey=true)]
		public category category
		{
			get
			{
				return this._category.Entity;
			}
			set
			{
				category previousValue = this._category.Entity;
				if (((previousValue != value) 
							|| (this._category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._category.Entity = null;
						previousValue.buildings.Remove(this);
					}
					this._category.Entity = value;
					if ((value != null))
					{
						value.buildings.Add(this);
						this._category_id = value.id;
					}
					else
					{
						this._category_id = default(int);
					}
					this.SendPropertyChanged("category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_building_has_basedivisors(building_has_basedivisor entity)
		{
			this.SendPropertyChanging();
			entity.building = this;
		}
		
		private void detach_building_has_basedivisors(building_has_basedivisor entity)
		{
			this.SendPropertyChanging();
			entity.building = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.categories")]
	public partial class category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _tooltip;
		
		private byte _disabled;
		
		private EntitySet<building> _buildings;
		
		private EntitySet<categories_has_basedivisor> _categories_has_basedivisors;
		
		private EntitySet<question> _questions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OntooltipChanging(string value);
    partial void OntooltipChanged();
    partial void OndisabledChanging(byte value);
    partial void OndisabledChanged();
    #endregion
		
		public category()
		{
			this._buildings = new EntitySet<building>(new Action<building>(this.attach_buildings), new Action<building>(this.detach_buildings));
			this._categories_has_basedivisors = new EntitySet<categories_has_basedivisor>(new Action<categories_has_basedivisor>(this.attach_categories_has_basedivisors), new Action<categories_has_basedivisor>(this.detach_categories_has_basedivisors));
			this._questions = new EntitySet<question>(new Action<question>(this.attach_questions), new Action<question>(this.detach_questions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NChar(25) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tooltip", DbType="NChar(150)")]
		public string tooltip
		{
			get
			{
				return this._tooltip;
			}
			set
			{
				if ((this._tooltip != value))
				{
					this.OntooltipChanging(value);
					this.SendPropertyChanging();
					this._tooltip = value;
					this.SendPropertyChanged("tooltip");
					this.OntooltipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_disabled", DbType="TinyInt NOT NULL")]
		public byte disabled
		{
			get
			{
				return this._disabled;
			}
			set
			{
				if ((this._disabled != value))
				{
					this.OndisabledChanging(value);
					this.SendPropertyChanging();
					this._disabled = value;
					this.SendPropertyChanged("disabled");
					this.OndisabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="category_building", Storage="_buildings", ThisKey="id", OtherKey="category_id")]
		public EntitySet<building> buildings
		{
			get
			{
				return this._buildings;
			}
			set
			{
				this._buildings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="category_categories_has_basedivisor", Storage="_categories_has_basedivisors", ThisKey="id", OtherKey="category_id")]
		public EntitySet<categories_has_basedivisor> categories_has_basedivisors
		{
			get
			{
				return this._categories_has_basedivisors;
			}
			set
			{
				this._categories_has_basedivisors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="category_question", Storage="_questions", ThisKey="id", OtherKey="category_id")]
		public EntitySet<question> questions
		{
			get
			{
				return this._questions;
			}
			set
			{
				this._questions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_buildings(building entity)
		{
			this.SendPropertyChanging();
			entity.category = this;
		}
		
		private void detach_buildings(building entity)
		{
			this.SendPropertyChanging();
			entity.category = null;
		}
		
		private void attach_categories_has_basedivisors(categories_has_basedivisor entity)
		{
			this.SendPropertyChanging();
			entity.category = this;
		}
		
		private void detach_categories_has_basedivisors(categories_has_basedivisor entity)
		{
			this.SendPropertyChanging();
			entity.category = null;
		}
		
		private void attach_questions(question entity)
		{
			this.SendPropertyChanging();
			entity.category = this;
		}
		
		private void detach_questions(question entity)
		{
			this.SendPropertyChanging();
			entity.category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.categories_has_basedivisors")]
	public partial class categories_has_basedivisor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _base_divisor_id;
		
		private int _category_id;
		
		private EntityRef<base_divisor> _base_divisor;
		
		private EntityRef<category> _category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onbase_divisor_idChanging(int value);
    partial void Onbase_divisor_idChanged();
    partial void Oncategory_idChanging(int value);
    partial void Oncategory_idChanged();
    #endregion
		
		public categories_has_basedivisor()
		{
			this._base_divisor = default(EntityRef<base_divisor>);
			this._category = default(EntityRef<category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_base_divisor_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int base_divisor_id
		{
			get
			{
				return this._base_divisor_id;
			}
			set
			{
				if ((this._base_divisor_id != value))
				{
					if (this._base_divisor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onbase_divisor_idChanging(value);
					this.SendPropertyChanging();
					this._base_divisor_id = value;
					this.SendPropertyChanged("base_divisor_id");
					this.Onbase_divisor_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_category_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int category_id
		{
			get
			{
				return this._category_id;
			}
			set
			{
				if ((this._category_id != value))
				{
					if (this._category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncategory_idChanging(value);
					this.SendPropertyChanging();
					this._category_id = value;
					this.SendPropertyChanged("category_id");
					this.Oncategory_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="base_divisor_categories_has_basedivisor", Storage="_base_divisor", ThisKey="base_divisor_id", OtherKey="id", IsForeignKey=true)]
		public base_divisor base_divisor
		{
			get
			{
				return this._base_divisor.Entity;
			}
			set
			{
				base_divisor previousValue = this._base_divisor.Entity;
				if (((previousValue != value) 
							|| (this._base_divisor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._base_divisor.Entity = null;
						previousValue.categories_has_basedivisors.Remove(this);
					}
					this._base_divisor.Entity = value;
					if ((value != null))
					{
						value.categories_has_basedivisors.Add(this);
						this._base_divisor_id = value.id;
					}
					else
					{
						this._base_divisor_id = default(int);
					}
					this.SendPropertyChanged("base_divisor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="category_categories_has_basedivisor", Storage="_category", ThisKey="category_id", OtherKey="id", IsForeignKey=true)]
		public category category
		{
			get
			{
				return this._category.Entity;
			}
			set
			{
				category previousValue = this._category.Entity;
				if (((previousValue != value) 
							|| (this._category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._category.Entity = null;
						previousValue.categories_has_basedivisors.Remove(this);
					}
					this._category.Entity = value;
					if ((value != null))
					{
						value.categories_has_basedivisors.Add(this);
						this._category_id = value.id;
					}
					else
					{
						this._category_id = default(int);
					}
					this.SendPropertyChanged("category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.costs")]
	public partial class cost : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _tooltip;
		
		private int _mainrubrick_id;
		
		private int _subrubrick_id;
		
		private EntitySet<yearreport_cost> _yearreport_costs;
		
		private EntityRef<mainrubric> _mainrubric;
		
		private EntityRef<subrubric> _subrubric;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OntooltipChanging(string value);
    partial void OntooltipChanged();
    partial void Onmainrubrick_idChanging(int value);
    partial void Onmainrubrick_idChanged();
    partial void Onsubrubrick_idChanging(int value);
    partial void Onsubrubrick_idChanged();
    #endregion
		
		public cost()
		{
			this._yearreport_costs = new EntitySet<yearreport_cost>(new Action<yearreport_cost>(this.attach_yearreport_costs), new Action<yearreport_cost>(this.detach_yearreport_costs));
			this._mainrubric = default(EntityRef<mainrubric>);
			this._subrubric = default(EntityRef<subrubric>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NChar(150) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tooltip", DbType="NChar(150)")]
		public string tooltip
		{
			get
			{
				return this._tooltip;
			}
			set
			{
				if ((this._tooltip != value))
				{
					this.OntooltipChanging(value);
					this.SendPropertyChanging();
					this._tooltip = value;
					this.SendPropertyChanged("tooltip");
					this.OntooltipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mainrubrick_id", DbType="Int NOT NULL")]
		public int mainrubrick_id
		{
			get
			{
				return this._mainrubrick_id;
			}
			set
			{
				if ((this._mainrubrick_id != value))
				{
					if (this._mainrubric.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onmainrubrick_idChanging(value);
					this.SendPropertyChanging();
					this._mainrubrick_id = value;
					this.SendPropertyChanged("mainrubrick_id");
					this.Onmainrubrick_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subrubrick_id", DbType="Int NOT NULL")]
		public int subrubrick_id
		{
			get
			{
				return this._subrubrick_id;
			}
			set
			{
				if ((this._subrubrick_id != value))
				{
					if (this._subrubric.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsubrubrick_idChanging(value);
					this.SendPropertyChanging();
					this._subrubrick_id = value;
					this.SendPropertyChanged("subrubrick_id");
					this.Onsubrubrick_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cost_yearreport_cost", Storage="_yearreport_costs", ThisKey="id", OtherKey="cost_id")]
		public EntitySet<yearreport_cost> yearreport_costs
		{
			get
			{
				return this._yearreport_costs;
			}
			set
			{
				this._yearreport_costs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mainrubric_cost", Storage="_mainrubric", ThisKey="mainrubrick_id", OtherKey="id", IsForeignKey=true)]
		public mainrubric mainrubric
		{
			get
			{
				return this._mainrubric.Entity;
			}
			set
			{
				mainrubric previousValue = this._mainrubric.Entity;
				if (((previousValue != value) 
							|| (this._mainrubric.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._mainrubric.Entity = null;
						previousValue.costs.Remove(this);
					}
					this._mainrubric.Entity = value;
					if ((value != null))
					{
						value.costs.Add(this);
						this._mainrubrick_id = value.id;
					}
					else
					{
						this._mainrubrick_id = default(int);
					}
					this.SendPropertyChanged("mainrubric");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="subrubric_cost", Storage="_subrubric", ThisKey="subrubrick_id", OtherKey="id", IsForeignKey=true)]
		public subrubric subrubric
		{
			get
			{
				return this._subrubric.Entity;
			}
			set
			{
				subrubric previousValue = this._subrubric.Entity;
				if (((previousValue != value) 
							|| (this._subrubric.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._subrubric.Entity = null;
						previousValue.costs.Remove(this);
					}
					this._subrubric.Entity = value;
					if ((value != null))
					{
						value.costs.Add(this);
						this._subrubrick_id = value.id;
					}
					else
					{
						this._subrubrick_id = default(int);
					}
					this.SendPropertyChanged("subrubric");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_yearreport_costs(yearreport_cost entity)
		{
			this.SendPropertyChanging();
			entity.cost = this;
		}
		
		private void detach_yearreport_costs(yearreport_cost entity)
		{
			this.SendPropertyChanging();
			entity.cost = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.mainrubrics")]
	public partial class mainrubric : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<cost> _costs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public mainrubric()
		{
			this._costs = new EntitySet<cost>(new Action<cost>(this.attach_costs), new Action<cost>(this.detach_costs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mainrubric_cost", Storage="_costs", ThisKey="id", OtherKey="mainrubrick_id")]
		public EntitySet<cost> costs
		{
			get
			{
				return this._costs;
			}
			set
			{
				this._costs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_costs(cost entity)
		{
			this.SendPropertyChanging();
			entity.mainrubric = this;
		}
		
		private void detach_costs(cost entity)
		{
			this.SendPropertyChanging();
			entity.mainrubric = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.municipalities")]
	public partial class municipality : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _address;
		
		private System.Nullable<int> _zip;
		
		private string _phone;
		
		private string _email;
		
		private EntitySet<yearreport> _yearreports;
		
		private EntitySet<municipality_has_user> _municipality_has_users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnzipChanging(System.Nullable<int> value);
    partial void OnzipChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    #endregion
		
		public municipality()
		{
			this._yearreports = new EntitySet<yearreport>(new Action<yearreport>(this.attach_yearreports), new Action<yearreport>(this.detach_yearreports));
			this._municipality_has_users = new EntitySet<municipality_has_user>(new Action<municipality_has_user>(this.attach_municipality_has_users), new Action<municipality_has_user>(this.detach_municipality_has_users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="NChar(100)")]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_zip", DbType="Int")]
		public System.Nullable<int> zip
		{
			get
			{
				return this._zip;
			}
			set
			{
				if ((this._zip != value))
				{
					this.OnzipChanging(value);
					this.SendPropertyChanging();
					this._zip = value;
					this.SendPropertyChanged("zip");
					this.OnzipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="NChar(15)")]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NChar(50)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="municipality_yearreport", Storage="_yearreports", ThisKey="id", OtherKey="municipality_id")]
		public EntitySet<yearreport> yearreports
		{
			get
			{
				return this._yearreports;
			}
			set
			{
				this._yearreports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="municipality_municipality_has_user", Storage="_municipality_has_users", ThisKey="id", OtherKey="mun_id")]
		public EntitySet<municipality_has_user> municipality_has_users
		{
			get
			{
				return this._municipality_has_users;
			}
			set
			{
				this._municipality_has_users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_yearreports(yearreport entity)
		{
			this.SendPropertyChanging();
			entity.municipality = this;
		}
		
		private void detach_yearreports(yearreport entity)
		{
			this.SendPropertyChanging();
			entity.municipality = null;
		}
		
		private void attach_municipality_has_users(municipality_has_user entity)
		{
			this.SendPropertyChanging();
			entity.municipality = this;
		}
		
		private void detach_municipality_has_users(municipality_has_user entity)
		{
			this.SendPropertyChanging();
			entity.municipality = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.municipality_has_users")]
	public partial class municipality_has_user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _user_id;
		
		private int _mun_id;
		
		private EntityRef<municipality> _municipality;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void Onmun_idChanging(int value);
    partial void Onmun_idChanged();
    #endregion
		
		public municipality_has_user()
		{
			this._municipality = default(EntityRef<municipality>);
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mun_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int mun_id
		{
			get
			{
				return this._mun_id;
			}
			set
			{
				if ((this._mun_id != value))
				{
					if (this._municipality.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onmun_idChanging(value);
					this.SendPropertyChanging();
					this._mun_id = value;
					this.SendPropertyChanged("mun_id");
					this.Onmun_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="municipality_municipality_has_user", Storage="_municipality", ThisKey="mun_id", OtherKey="id", IsForeignKey=true)]
		public municipality municipality
		{
			get
			{
				return this._municipality.Entity;
			}
			set
			{
				municipality previousValue = this._municipality.Entity;
				if (((previousValue != value) 
							|| (this._municipality.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._municipality.Entity = null;
						previousValue.municipality_has_users.Remove(this);
					}
					this._municipality.Entity = value;
					if ((value != null))
					{
						value.municipality_has_users.Add(this);
						this._mun_id = value.id;
					}
					else
					{
						this._mun_id = default(int);
					}
					this.SendPropertyChanged("municipality");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_municipality_has_user", Storage="_user", ThisKey="user_id", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.municipality_has_users.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.municipality_has_users.Add(this);
						this._user_id = value.id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.newsletters")]
	public partial class newsletter
	{
		
		private int _user_id;
		
		private string _email;
		
		public newsletter()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL")]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					this._user_id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this._email = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.questions")]
	public partial class question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _text;
		
		private string _tooltip;
		
		private string _values_type;
		
		private byte _disabled;
		
		private int _category_id;
		
		private EntityRef<category> _category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    partial void OntooltipChanging(string value);
    partial void OntooltipChanged();
    partial void Onvalues_typeChanging(string value);
    partial void Onvalues_typeChanged();
    partial void OndisabledChanging(byte value);
    partial void OndisabledChanged();
    partial void Oncategory_idChanging(int value);
    partial void Oncategory_idChanged();
    #endregion
		
		public question()
		{
			this._category = default(EntityRef<category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tooltip", DbType="NChar(150)")]
		public string tooltip
		{
			get
			{
				return this._tooltip;
			}
			set
			{
				if ((this._tooltip != value))
				{
					this.OntooltipChanging(value);
					this.SendPropertyChanging();
					this._tooltip = value;
					this.SendPropertyChanged("tooltip");
					this.OntooltipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_values_type", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string values_type
		{
			get
			{
				return this._values_type;
			}
			set
			{
				if ((this._values_type != value))
				{
					this.Onvalues_typeChanging(value);
					this.SendPropertyChanging();
					this._values_type = value;
					this.SendPropertyChanged("values_type");
					this.Onvalues_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_disabled", DbType="TinyInt NOT NULL")]
		public byte disabled
		{
			get
			{
				return this._disabled;
			}
			set
			{
				if ((this._disabled != value))
				{
					this.OndisabledChanging(value);
					this.SendPropertyChanging();
					this._disabled = value;
					this.SendPropertyChanged("disabled");
					this.OndisabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_category_id", DbType="Int NOT NULL")]
		public int category_id
		{
			get
			{
				return this._category_id;
			}
			set
			{
				if ((this._category_id != value))
				{
					if (this._category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncategory_idChanging(value);
					this.SendPropertyChanging();
					this._category_id = value;
					this.SendPropertyChanged("category_id");
					this.Oncategory_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="category_question", Storage="_category", ThisKey="category_id", OtherKey="id", IsForeignKey=true)]
		public category category
		{
			get
			{
				return this._category.Entity;
			}
			set
			{
				category previousValue = this._category.Entity;
				if (((previousValue != value) 
							|| (this._category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._category.Entity = null;
						previousValue.questions.Remove(this);
					}
					this._category.Entity = value;
					if ((value != null))
					{
						value.questions.Add(this);
						this._category_id = value.id;
					}
					else
					{
						this._category_id = default(int);
					}
					this.SendPropertyChanged("category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.statuscodes")]
	public partial class statuscode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<yearreport> _yearreports;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public statuscode()
		{
			this._yearreports = new EntitySet<yearreport>(new Action<yearreport>(this.attach_yearreports), new Action<yearreport>(this.detach_yearreports));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="statuscode_yearreport", Storage="_yearreports", ThisKey="id", OtherKey="statuscode_id")]
		public EntitySet<yearreport> yearreports
		{
			get
			{
				return this._yearreports;
			}
			set
			{
				this._yearreports.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_yearreports(yearreport entity)
		{
			this.SendPropertyChanging();
			entity.statuscode = this;
		}
		
		private void detach_yearreports(yearreport entity)
		{
			this.SendPropertyChanging();
			entity.statuscode = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.subrubrics")]
	public partial class subrubric : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<cost> _costs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public subrubric()
		{
			this._costs = new EntitySet<cost>(new Action<cost>(this.attach_costs), new Action<cost>(this.detach_costs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="subrubric_cost", Storage="_costs", ThisKey="id", OtherKey="subrubrick_id")]
		public EntitySet<cost> costs
		{
			get
			{
				return this._costs;
			}
			set
			{
				this._costs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_costs(cost entity)
		{
			this.SendPropertyChanging();
			entity.subrubric = this;
		}
		
		private void detach_costs(cost entity)
		{
			this.SendPropertyChanging();
			entity.subrubric = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.user_acceptances")]
	public partial class user_acceptance
	{
		
		private int _user_id;
		
		private string _token;
		
		public user_acceptance()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL")]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					this._user_id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_token", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string token
		{
			get
			{
				return this._token;
			}
			set
			{
				if ((this._token != value))
				{
					this._token = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.usergroups")]
	public partial class usergroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<user> _users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public usergroup()
		{
			this._users = new EntitySet<user>(new Action<user>(this.attach_users), new Action<user>(this.detach_users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NChar(25) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="usergroup_user", Storage="_users", ThisKey="id", OtherKey="usergroup_id")]
		public EntitySet<user> users
		{
			get
			{
				return this._users;
			}
			set
			{
				this._users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_users(user entity)
		{
			this.SendPropertyChanging();
			entity.usergroup = this;
		}
		
		private void detach_users(user entity)
		{
			this.SendPropertyChanging();
			entity.usergroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.users")]
	public partial class user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _email;
		
		private string _password;
		
		private System.DateTime _reg_date;
		
		private System.Nullable<System.DateTime> _accept_date;
		
		private int _usergroup_id;
		
		private EntitySet<municipality_has_user> _municipality_has_users;
		
		private EntityRef<usergroup> _usergroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void Onreg_dateChanging(System.DateTime value);
    partial void Onreg_dateChanged();
    partial void Onaccept_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onaccept_dateChanged();
    partial void Onusergroup_idChanging(int value);
    partial void Onusergroup_idChanged();
    #endregion
		
		public user()
		{
			this._municipality_has_users = new EntitySet<municipality_has_user>(new Action<municipality_has_user>(this.attach_municipality_has_users), new Action<municipality_has_user>(this.detach_municipality_has_users));
			this._usergroup = default(EntityRef<usergroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reg_date", DbType="DateTime NOT NULL")]
		public System.DateTime reg_date
		{
			get
			{
				return this._reg_date;
			}
			set
			{
				if ((this._reg_date != value))
				{
					this.Onreg_dateChanging(value);
					this.SendPropertyChanging();
					this._reg_date = value;
					this.SendPropertyChanged("reg_date");
					this.Onreg_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_accept_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> accept_date
		{
			get
			{
				return this._accept_date;
			}
			set
			{
				if ((this._accept_date != value))
				{
					this.Onaccept_dateChanging(value);
					this.SendPropertyChanging();
					this._accept_date = value;
					this.SendPropertyChanged("accept_date");
					this.Onaccept_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_usergroup_id", DbType="Int NOT NULL")]
		public int usergroup_id
		{
			get
			{
				return this._usergroup_id;
			}
			set
			{
				if ((this._usergroup_id != value))
				{
					if (this._usergroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onusergroup_idChanging(value);
					this.SendPropertyChanging();
					this._usergroup_id = value;
					this.SendPropertyChanged("usergroup_id");
					this.Onusergroup_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_municipality_has_user", Storage="_municipality_has_users", ThisKey="id", OtherKey="user_id")]
		public EntitySet<municipality_has_user> municipality_has_users
		{
			get
			{
				return this._municipality_has_users;
			}
			set
			{
				this._municipality_has_users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="usergroup_user", Storage="_usergroup", ThisKey="usergroup_id", OtherKey="id", IsForeignKey=true)]
		public usergroup usergroup
		{
			get
			{
				return this._usergroup.Entity;
			}
			set
			{
				usergroup previousValue = this._usergroup.Entity;
				if (((previousValue != value) 
							|| (this._usergroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._usergroup.Entity = null;
						previousValue.users.Remove(this);
					}
					this._usergroup.Entity = value;
					if ((value != null))
					{
						value.users.Add(this);
						this._usergroup_id = value.id;
					}
					else
					{
						this._usergroup_id = default(int);
					}
					this.SendPropertyChanged("usergroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_municipality_has_users(municipality_has_user entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_municipality_has_users(municipality_has_user entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.yearreport_costs")]
	public partial class yearreport_cost : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _cost_id;
		
		private System.Nullable<long> _value;
		
		private int _yearreport_id;
		
		private EntityRef<cost> _cost;
		
		private EntityRef<yearreport> _yearreport;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Oncost_idChanging(int value);
    partial void Oncost_idChanged();
    partial void OnvalueChanging(System.Nullable<long> value);
    partial void OnvalueChanged();
    partial void Onyearreport_idChanging(int value);
    partial void Onyearreport_idChanged();
    #endregion
		
		public yearreport_cost()
		{
			this._cost = default(EntityRef<cost>);
			this._yearreport = default(EntityRef<yearreport>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cost_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int cost_id
		{
			get
			{
				return this._cost_id;
			}
			set
			{
				if ((this._cost_id != value))
				{
					if (this._cost.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncost_idChanging(value);
					this.SendPropertyChanging();
					this._cost_id = value;
					this.SendPropertyChanged("cost_id");
					this.Oncost_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="BigInt")]
		public System.Nullable<long> value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_yearreport_id", DbType="Int NOT NULL")]
		public int yearreport_id
		{
			get
			{
				return this._yearreport_id;
			}
			set
			{
				if ((this._yearreport_id != value))
				{
					if (this._yearreport.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onyearreport_idChanging(value);
					this.SendPropertyChanging();
					this._yearreport_id = value;
					this.SendPropertyChanged("yearreport_id");
					this.Onyearreport_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cost_yearreport_cost", Storage="_cost", ThisKey="cost_id", OtherKey="id", IsForeignKey=true)]
		public cost cost
		{
			get
			{
				return this._cost.Entity;
			}
			set
			{
				cost previousValue = this._cost.Entity;
				if (((previousValue != value) 
							|| (this._cost.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._cost.Entity = null;
						previousValue.yearreport_costs.Remove(this);
					}
					this._cost.Entity = value;
					if ((value != null))
					{
						value.yearreport_costs.Add(this);
						this._cost_id = value.id;
					}
					else
					{
						this._cost_id = default(int);
					}
					this.SendPropertyChanged("cost");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="yearreport_yearreport_cost", Storage="_yearreport", ThisKey="yearreport_id", OtherKey="id", IsForeignKey=true)]
		public yearreport yearreport
		{
			get
			{
				return this._yearreport.Entity;
			}
			set
			{
				yearreport previousValue = this._yearreport.Entity;
				if (((previousValue != value) 
							|| (this._yearreport.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._yearreport.Entity = null;
						previousValue.yearreport_costs.Remove(this);
					}
					this._yearreport.Entity = value;
					if ((value != null))
					{
						value.yearreport_costs.Add(this);
						this._yearreport_id = value.id;
					}
					else
					{
						this._yearreport_id = default(int);
					}
					this.SendPropertyChanged("yearreport");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
